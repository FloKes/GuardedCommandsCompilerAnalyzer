// Open the file that defines the type "expr" we shall use as AST
%{
open TypesAST
%}

// Declare the tokens (terminal symbols)
%token <int> NUM
%token <string> IDENTIFIER
%token ASSIGN
%token IF FI THEN ELSE DO OD SKIP
%token LPAR RPAR LSPAR RSPAR
%token TIMES DIV PLUS MINUS POW SEMI EOF 
%token TRUE FALSE LOR LAND OR AND NOT EQ NEQ GT LT GEQ LEQ 
// NOTE: the actual formats of these tokens are defined in the lexer file
//       as regular expressions

// Specify precedence and associativity of operators
// Precedence is given by the order (from low to high)
// %left PLUS MINUS
// %left TIMES DIV
// %right POW


// We declare the initial non-terminal symbol
%start start

// We specify the return type of each of then non-terminal symbols
%type <command> start
%type <command> command0
%type <command> command1
%type <guardedcommand> guardedCommand0
%type <guardedcommand> guardedCommand1

// Arithmetic expr
%type <aexpr> Aexpression0
%type <aexpr> Aexpression1
%type <aexpr> Aexpression2
%type <aexpr> Aexpression3
%type <aexpr> identifier

// Boolean expr
%type <bexpr> Bexpression0
%type <bexpr> Bexpression1
%type <bexpr> Bexpression2
%type <bexpr> Bexpression3
%type <bexpr> Bexpression4
%type <bexpr> Bexpression5



// Grammar productions
%%

// The first production in "formal" notation is
// start -> expression0
// here written:
start: command0 EOF             { $1 }

// Note that we need to insert an End-Of-File (EOF)
// The code annotation { $1 } specifies that parsing with this production
// returns whatever parsing the expression returns: $1 is the result of parsing
// the first component of the production (i.e. expression)

// The productions for expressions are like in the grammar we saw in class
// written in the yacc format:

// Now we have one level for each of the operator precedence levels (see GCL rules)
// Note how we deal with associativity by allowing recursion on one side only


// Commands
command0:
  | command1 SEMI command0  {CommandSeq($1, $3)}
  | command1                {$1}

command1:
  | identifier ASSIGN Aexpression0  { Assign($1, $3)}
  | IF guardedCommand0 FI           { IfFi($2) }
  | DO guardedCommand0 OD           { DoOd($2) }
  | SKIP                            { Skip}

guardedCommand0:
  | guardedCommand1 ELSE guardedCommand0  {GuardedCommandSeq($1, $3)}
  | guardedCommand1                       {$1}

guardedCommand1:
  | Bexpression0 THEN command0             {GuardedCommand($1, $3)}

//Arithmetic expressions
Aexpression0:
  | Aexpression0 PLUS Aexpression1    { PlusExpr($1,$3) }
  | Aexpression0 MINUS Aexpression1   { MinusExpr($1,$3) }
  | Aexpression1                      { $1 }

Aexpression1:
  | Aexpression1 TIMES Aexpression2   { TimesExpr($1,$3) }
  | Aexpression1 DIV Aexpression2     { DivExpr($1,$3) }
  | Aexpression2                      { $1 }

Aexpression2:
  | Aexpression3 POW Aexpression2     { PowExpr($1,$3) }
  | Aexpression3                      { $1 }

Aexpression3:
  | PLUS Aexpression3                { UPlusExpr($2) }
  | MINUS Aexpression3               { UMinusExpr($2) }
  | NUM                              { Num($1) }
  | identifier                       { $1}
  | LPAR Aexpression0 RPAR           { $2 }

identifier:
| IDENTIFIER                            { Identifier($1)}
| IDENTIFIER LSPAR Aexpression0 RSPAR   { IdentifierArray($1, $3)}
  

// Booleans

Bexpression0:
  | Bexpression0 LOR Bexpression1           {LOrExpr($1, $3)}
  | Bexpression0 OR Bexpression1            {OrExpr($1, $3)} 
  | Bexpression1                            { $1 }

Bexpression1:
  | Bexpression1 LAND Bexpression2          {LAndExpr($1, $3)}
  | Bexpression1 AND Bexpression2           {AndExpr($1, $3)}
  | Bexpression2                            { $1 }          


Bexpression2:
  | Aexpression0 EQ Aexpression0            {EqExpr($1, $3)}
  | Aexpression0 NEQ Aexpression0           {NeqExpr($1, $3)}
  | Bexpression3                            { $1 }

Bexpression3:
  | Aexpression0 LT Aexpression0            {LtExpr($1, $3)}
  | Aexpression0 LEQ Aexpression0           {LeqExpr($1, $3)}
  | Aexpression0 GT Aexpression0            {GtExpr($1, $3)}
  | Aexpression0 GEQ Aexpression0           {GeqExpr($1, $3)}
  | Bexpression4                            { $1 }

Bexpression4:
  | NOT Bexpression5                        {NotExpr($2)}
  | Bexpression5                            { $1 }

Bexpression5:
  | TRUE                            {Bool(true)}
  | FALSE                           {Bool(false)}
  | LPAR Bexpression0 RPAR          {$2}

// Again, the code annotation specifies the result of parsing
// For example { TimesExpr($1,$3) } specifies that parsing with the production
// returns the value TimesExpr($1,$3), where $i is the result of parsing
// component i in the production (in this case the lhs and rhs operands)

%%
